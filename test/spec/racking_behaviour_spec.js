//This file is part of S2 and is distributed under the terms of GNU General Public License version 1 or later;
//Please refer to the LICENSE and README files for information on licensing and authorship of this file.
//Copyright (C) 2014 Genome Research Ltd.
// Generated by CoffeeScript 1.7.1
define(["app-components/manual-racking/racking-behaviour"], function(RackingBehaviour) {
  var rack;
  rack = {};
  return describe("Racking Behaviour", function() {
    var config;
    config = {
      labware: {},
      aliquotType: "blood",
      rows: 4,
      columns: 6
    };
    beforeEach(function() {
      rack = new RackingBehaviour(config);
      return rack.trigger = function() {};
    });
    afterEach(function() {
      return rack = null;
    });
    it("should create an array of locations on creation", function() {
      var locations;
      locations = ["A1", "B1", "C1", "D1", "A2", "B2", "C2", "D2", "A3", "B3", "C3", "D3", "A4", "B4", "C4", "D4", "A5", "B5", "C5", "D5", "A6", "B6", "C6", "D6"];
      return expect(rack.locations).to.deep.equal(locations);
    });
    it("should create an array of tubes after being initialized", function() {
      var firstTube;
      firstTube = {
        location: "A1",
        tube: {}
      };
      return expect(rack.tubes[0]).to.eql(firstTube);
    });
    it("should return the \"current\" location", function() {
      return expect(rack.currentLocation).to.equal("A1");
    });
    it("should return the current location after calling next location", function() {
      rack.nextLocation();
      rack.nextLocation();
      rack.nextLocation();
      rack.nextLocation();
      return expect(rack.currentLocation).to.equal("A2");
    });
    it("should set the resource", function() {
      var dummyResource;
      dummyResource = {
        test: "test test"
      };
      rack.setResource(dummyResource);
      return expect(rack.resource).to.eql(dummyResource);
    });
    it("should be able to have tubes added", function() {
      var mockTube1, mockTube2, mockTube3, tube, _i, _len, _ref;
      mockTube1 = {
        tube: {
          uuid: 1111
        },
        location: "A1"
      };
      mockTube2 = {
        tube: {
          uuid: 2222
        },
        location: "B1"
      };
      mockTube3 = {
        tube: {
          uuid: 3333
        },
        location: "C1"
      };
      _ref = [mockTube1, mockTube2, mockTube3];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        tube = _ref[_i];
        rack.addTube(tube.tube, tube.location);
      }
      expect(rack.tubes[0]).to.eql(mockTube1);
      expect(rack.tubes[1]).to.eql(mockTube2);
      return expect(rack.tubes[2]).to.eql(mockTube3);
    });
    return it("should reset the tubes after being emptied", function() {
      var emptyMockTube1, emptyMockTube2, emptyMockTube3, i, mockTube1, mockTube2, mockTube3, tube, _i, _j, _len, _len1, _ref, _ref1, _results;
      mockTube1 = {
        tube: {
          uuid: 1111
        },
        location: "A1"
      };
      mockTube2 = {
        tube: {
          uuid: 2222
        },
        location: "B1"
      };
      mockTube3 = {
        tube: {
          uuid: 3333
        },
        location: "C1"
      };
      _ref = [mockTube1, mockTube2, mockTube3];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        tube = _ref[_i];
        rack.addTube(tube.tube, tube.location);
      }
      rack.empty();
      emptyMockTube1 = {
        tube: {},
        location: "A1"
      };
      emptyMockTube2 = {
        tube: {},
        location: "B1"
      };
      emptyMockTube3 = {
        tube: {},
        location: "C1"
      };
      _ref1 = [emptyMockTube1, emptyMockTube2, emptyMockTube3];
      _results = [];
      for (i = _j = 0, _len1 = _ref1.length; _j < _len1; i = ++_j) {
        tube = _ref1[i];
        _results.push((function() {
          return expect(rack.tubes[i]).to.eql(tube);
        })());
      }
      return _results;
    });
  });
});
